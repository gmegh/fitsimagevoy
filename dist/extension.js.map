{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["// Description: This is the main file of the extension. \n// It contains the code to activate and deactivate the extension, \n// and to register the custom editor provider.\n\n// Import the relevant modules\nimport * as vscode from 'vscode';\nimport * as crypto from 'crypto';\nimport { ChildProcess, spawn } from 'child_process';\nconst osvar = process.platform;\nconst path = require(\"path\");\nconst requirements = path.join(__dirname, \"python/requirements.txt\");\n\n\n// Implement the CustomTextEditorProvider interface\nclass CustomEditorProvider implements vscode.CustomReadonlyEditorProvider {\n    private openDocuments: Map<string, CustomDocument> = new Map();\n\n\tconstructor(\n\t\tprivate readonly _context: vscode.ExtensionContext\n\t) { }\n\n    // Implement the necessary methods (open, resolve, etc.)\n    openCustomDocument(uri: vscode.Uri, openContext: vscode.CustomDocumentOpenContext, token: vscode.CancellationToken): vscode.CustomDocument {\n        // Check if there are existing webviews for the URI\n        let existingDocument = this.openDocuments.get(uri.fsPath);\n        if (existingDocument) {\n            // Dispose the existing document if needed\n            return existingDocument;\n        }\n\n        // Create a new CustomDocument instance for the URI\n        const newDocument = new CustomDocument(uri);\n        this.openDocuments.set(uri.fsPath, newDocument);\n\n        return newDocument;\n    }\n\n    // Implement the necessary methods (open, resolve, etc.)\n    async setWebviewForDocument(document: CustomDocument, webviewPanel: vscode.WebviewPanel): Promise<void> {\n        /**\n         * This function updates the webview panel with the new document\n         * \n         * @param document The document to be displayed in the webview\n         * @param webviewPanel The webview panel to be updated\n         * \n         * @returns void\n         */\n\n        // Send a message to the webview to update the header info\n        const documentDataJson = JSON.stringify({\n            file: document.file,\n            selectedHdu: document.selectedHdu,\n            options: document.options,\n        });\n\n        // Get the path to the script and style files\n\n        const scriptPath = webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this._context.extensionUri, 'assets/main.js'));\n        const stylePath = webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this._context.extensionUri, 'assets/style.css'));\n        const webviewUri = webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this._context.extensionUri, 'dist/webview.js'));\n        const appIconUri = webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this._context.extensionUri, 'assets/images/appIcon.png'));\n        const kipacLogoUri = webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this._context.extensionUri, 'assets/images/KIPAC_stack.png'));\n        const codiconsUri = webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this._context.extensionUri, 'node_modules/vscode/codicons/dist/codicon.css'));\n        const codiconsFontUri = webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this._context.extensionUri, 'node_modules', 'vscode/codicons', 'dist', 'codicon.ttf'));\n\n        // Generate a nonce to add to the script element\n        const randomBytes = crypto.randomBytes(16);\n        const nonce = randomBytes.toString('base64');\n\n        // Check if the selected HDU is an image\n        const isImage = document.file[`hdu${document.selectedHdu}`].encoded_image;\n        const selected = `hdu${document.selectedHdu}`;\n\n        const new_html = `<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta http-equiv=\u201CContent-Security-Policy\u201D content=\u201Cfont-src ${webviewPanel.webview.cspSource} ${codiconsFontUri} vscode-resource: \u2018unsafe-inline\u2019; style-src ${webviewPanel.webview.cspSource} ${codiconsUri} vscode-resource: \u2018unsafe-inline\u2019; script-src \u2018self\u2019 \u2018self\u2019 https://*.vscode-cdn.net https://d3js.org https://mpld3.github.io \u2018unsafe-inline\u2019; img-src \u2018self\u2019 \u2018self\u2019 https://*.vscode-cdn.net data:;\u201C>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                        <title>Your Custom Editor</title>\n            <link href=\"${stylePath}\" rel=\"stylesheet\" type=\"text/css\" >\n        </head>\n        <body>\n            <!-- Header Section -->\n            <div id=\"headerContainer\">\n                <div id=\"headerContent\">\n                    <img src=\"${appIconUri}\" alt=\"App Icon\" width=\"50\" height=\"50\">\n                    <div>\n                        <h2>FitsImageVOY</h2>\n                        <p>From DS9 to VOY, dedicated to all Rubin Observatory scientists</p>\n                    </div>\n                </div>\n            </div>\n        \n            <!-- Main Container -->\n            <div id=\"container\">\n                <!-- Header Selector and Headers Container -->\n                <div id=\"headerInfoContainer\">\n                    <div id=\"optionsSection\">\n                        <h2>Selectable options</h2>\n\n\n                        <div id=\"hduListContainer\" class=\"dropdown-container\">\n                            <label for=\"hduSelector\">Select HDU:</label>\n                            <vscode-dropdown id=\"hduSelector\"></vscode-dropdown>\n                            <vscode-data-grid id=\"basic-grid\" aria-label=\"Basic\"></vscode-data-grid>\n                        </div>\n\n                        <vscode-divider role=\"presentation\"></vscode-divider>\n\n                        <vscode-radio-group id=\"colorSelector\"></vscode-radio-group>\n\n                        <vscode-divider role=\"presentation\"></vscode-divider>\n\n                        <vscode-radio-group id=\"scaleSelector\"></vscode-radio-group>\n\n                    </div>\n        \n                    <!-- Header Info Section -->\n                    <div id=\"headerInfoSection\">\n                        <div id=\"headerInfoHeader\">\n                            <h2>Header Information</h2>\n                            <vscode-text-field placeholder=\"Search\" id=\"input\">\n                                <span slot=\"start\" appearance=\"icon\" class=\"codicon codicon-search\"></span>\n                            </vscode-text-field>\n                        </div>\n                        <div id=\"headerInfo\"></div>\n                    </div>\n                </div>\n        \n                <vscode-divider role=\"presentation\"></vscode-divider>\n                \n                <!-- Image Section -->\n                <div id=\"imageSection\">\n                    <div id=\"imageDiv\" class=\"responsive-plot\">\n                        ${isImage ? document.file[selected].html_plot : ''}\n                    </div>\n                    <!-- Add your image or placeholder here -->\n                    <!--  <img id=\"fits-image\" alt=\"FITS Image\" src=\"\" onerror=\"showPlaceholder()\"> -->\n                    <h2 id=\"placeholderText\" style=\"display: none;\">No image to display.</h2>\n                </div>\n            </div>\n            <script type=\"module\" src=\"${webviewUri}\"></script>\n            <script>\n                const vscode = acquireVsCodeApi();\n\n                // Update the color value in the options\n                function updateColor(event) {\n                    // Post a message to VS Code\n                    vscode.postMessage({\n                        command: 'colormapChanged',\n                        newColormap: event\n                    });\n                }\n\n                // Update the scale value in the options\n                function updateScale(event) {\n                    // Post a message to VS Code\n                    vscode.postMessage({\n                        command: 'scaleChanged',\n                        newScale: event\n                    });\n                }\n\n                // Adjust the scale on page load and whenever the window is resized\n                document.addEventListener('DOMContentLoaded',  () => {\n                    // Dynamically create a script element for main.js\n                    const mainScript = document.createElement('script');\n                    mainScript.type = 'module';\n                    mainScript.nonce = '${nonce}';\n                    mainScript.src = '${scriptPath}';\n                    // Append the script element to the document\n                    document.body.appendChild(mainScript);\n\n                    // Post a message to VS Code\n                    vscode.postMessage({\n                        command: 'doneLoading'\n                    });\n                });\n            </script>\n        </body>\n        <footer>\n            <div id=\"footerContainer\">\n                <div id=\"footerText\">\n                    <p>Designed by <a href=\"https://github.com/gmegh/\" target=\"_blank\">@gmegh</a></p>\n                    <p>at KIPAC, Stanford University</p>\n                </div>\n                \n                <div id=\"kipacLogo\">\n                    <!-- Replace 'path_to_your_logo.png' with the actual path to your KIPAC logo -->\n                    <img src=\"${kipacLogoUri}\" alt=\"KIPAC Logo\" style=\"max-width: 80px; height: auto;\">\n                </div>\n            </div>\n        </footer>\n        </html>`;\n\n        webviewPanel.webview.html = new_html;\n    }\n\n    async resolveCustomEditor(\n        document: CustomDocument,\n        webviewPanel: vscode.WebviewPanel,\n        _token: vscode.CancellationToken\n    ): Promise<void> {\n        /**\n         * This function resolves the webview panel with the new document\n         * \n         * @param document The document to be displayed in the webview\n         * @param webviewPanel The webview panel to be updated\n         * @param _token The cancellation token\n         * \n         * @returns void\n         */\n        \n        // Setup initial content for the webview\n        webviewPanel.webview.options = {\n            enableScripts: true,\n        };\n    \n        // Call the open method to load the header\n        await document.open();\n\n        // Set the webview for the document\n        await this.setWebviewForDocument(document, webviewPanel);\n\n        // Handle messages from the webview\n        webviewPanel.webview.onDidReceiveMessage(\n            async message => {\n                switch (message.command) {\n                    // Handle hdu selected change\n                    case 'hduSelectorChanged':\n                        document.selectedHdu = message.newSelectedHdu;\n                        await this.setWebviewForDocument(document, webviewPanel);\n                        break;\n                    case 'doneLoading':\n                        const documentDataJson = JSON.stringify({\n                            file: document.file,\n                            selectedHdu: document.selectedHdu,\n                            options: document.options,\n                        });\n\n                        await webviewPanel.webview.postMessage({\n                            command: 'updateHeaderInfo', \n                            data: documentDataJson \n                        });\n                        break;\n                    // Handle colormap change\n                    case 'colormapChanged':\n                        document.options.colormap = message.newColormap;\n\n                        await document.open();\n\n                        webviewPanel.webview.postMessage({ \n                            command: 'updateImage', \n                            data: JSON.stringify({\n                                file: document.file,\n                                selectedHdu: document.selectedHdu,\n                                options: document.options,\n                            })\n                        });\n                        break;\n                    // Handle scale change\n                    case 'scaleChanged':\n                        document.options.scale = message.newScale;\n\n                        await document.open();\n\n                        webviewPanel.webview.postMessage({ \n                            command: 'updateImage', \n                            data: JSON.stringify({\n                                file: document.file,\n                                selectedHdu: document.selectedHdu,\n                                options: document.options,\n                            })\n                        });\n                        break;\n                }\n            },\n            undefined,\n        );\n    }\n\n    saveCustomDocument(document: vscode.CustomDocument, cancellation: vscode.CancellationToken): Thenable<void> {\n        // Implement the logic to save the custom document\n        return Promise.resolve();\n    }\n}\n\n\nclass CustomDocument implements vscode.CustomDocument {\n    // Implement the necessary methods and properties for your custom document\n    private _uri: vscode.Uri;\n    private _file: any;  // Replace with the actual type of your header\n    private _options: any;\n    private _selectedHdu: any;  // Replace with the actual type of your header\n\n    constructor(uri: vscode.Uri) {\n        this._uri = uri;\n\n        const configuration = vscode.workspace.getConfiguration('fitsimagevoy');\n        const defaultColormap = configuration.get('defaultColormap', 'viridis');\n        const defaultScale = configuration.get('defaultScale', 'linear');\n        this.options = {\n            'colormap': defaultColormap,\n            'scale': defaultScale,\n        }; \n    }\n    get uri(): vscode.Uri {\n        return this._uri;\n    }\n\n    get file(): any {\n        return this._file;\n    }\n\n    set file(value: any) {\n        this._selectedHdu = value;\n    }\n\n    get options(): any {\n        return this._options;\n    }\n\n    set options(value: any) {\n        this._options = value;\n    }\n\n    get selectedHdu(): any {\n        return this._selectedHdu;\n    }\n\n    set selectedHdu(value: any) {\n        this._selectedHdu = value;\n    }\n\n    // Implement the open method to load the header\n    async open(): Promise<void> {\n        /**\n         * This function opens the FITS file and stores the data in the _file variable\n         * \n         * @returns void\n         */\n        \n        this._file = await this.generateImageFromFits(this._uri.fsPath, this._options['colormap'], this._options['scale']);\n\n        // Initialize a variable to store the selected element\n        this._selectedHdu = 0;\n\n        // Iterate over the elements and find the first one with encoded_image not equal to none\n        for (const key in this._file) {\n            const element = this._file[key];\n\n            if (element['encoded_image'] !== false) {\n                this._selectedHdu = parseInt(key.replace('hdu', ''), 10);\n                break;\n            }\n        }\n    }\n\n    async generateImageFromFits(fitsFilePath: string, colormap: string, scale: string): Promise<any> {\n        /**\n         * This function reads a FITS file and returns the image data, headers and html.\n         * It connects with python to run this process.\n         * \n         * @param fitsFilePath The path to the FITS file\n         * @param colormap The colormap to be used\n         * @param scale The scale to be used\n         * \n         * @returns A Json string containing the image data, the headers and html.\n         */\n        return new Promise<any>((resolve, reject) => {\n\n            // Get the Python interpreter path from VSCode settings\n            const pythonInterpreterPath: string | undefined = vscode.workspace.getConfiguration('python').get('defaultInterpreterPath');\n    \n            let command = '';\n            if (pythonInterpreterPath === undefined) {\n                command = osvar === 'win32' ? 'python' : 'python3';\n            } else {\n                command = pythonInterpreterPath;\n            }\n        \n            //const command = osvar === 'win32' ? 'python' : 'python3';\n            //const activationCommand = 'source /sdf/group/rubin/sw/w_latest/loadLSST.bash';\n            const activationCommand = '';\n            const pythonScriptPath = path.join(__dirname, 'python', 'generate_image.py');\n            const combinedCommand = `\n                ${activationCommand} > /dev/null 2>&1 &&\n                ${command} ${pythonScriptPath} \"${fitsFilePath}\" ${colormap} ${scale}\n            `;\n\n            // Combine activation and Python commands\n            const pythonProcess = spawn('bash', ['-c', combinedCommand]);\n            \n            let result = '';  // Variable to store the base64-encoded image data\n            if (pythonProcess?.stdout && pythonProcess?.stderr) {\n                pythonProcess.stdout.on('data', (data) => {\n                    // Handle data received from the Python script\n                    result += data.toString();\n                });\n        \n                pythonProcess.stderr.on('data', (data) => {\n                    // Handle errors or messages from the Python script\n                    console.error(`Python stderr: ${data}`);\n                    reject(new Error(`Failed to generate image from FITS file.`));\n                });\n        \n                pythonProcess.on('exit', (code) => {\n                    try {\n                        const output = JSON.parse(result);\n                        resolve(output);\n                    } catch (error) {\n                        console.error(`Failed to parse Python script output: ${error}`);\n                        reject(new Error(`Failed to generate image from FITS file.`));\n                    }\n                });\n            } else {\n                reject(new Error('Failed to start the Python process.'));\n            }\n        \n        });\n    }\n\n\tdispose(): void {}\n}\n\n// Activate the extension\nexport function activate(context: vscode.ExtensionContext) {\n    const pythonInterpreterPath: string | undefined = vscode.workspace.getConfiguration('python').get('defaultInterpreterPath');\n    \n    let command = '';\n    //const command = osvar === 'win32' ? 'python' : 'python3';\n    if (pythonInterpreterPath === undefined) {\n        command = osvar === 'win32' ? 'python' : 'python3';\n    } else {\n        command = pythonInterpreterPath;\n    }\n    \n    //const activationCommand = 'source /sdf/group/rubin/sw/w_latest/loadLSST.bash';\n    const activationCommand = '';\n    \n    const combinedCommand = `\n        ${activationCommand} > /dev/null 2>&1 &&\n        ${command} -m pip install -r ${requirements}\n    `;\n\n    spawn('bash', ['-c', combinedCommand]);\n\n    // Register the custom editor provider\n    context.subscriptions.push(\n        vscode.window.registerCustomEditorProvider('fitsimagevoy.fits', new CustomEditorProvider(context), \n        {\n            webviewOptions: {\n\t\t\t\tretainContextWhenHidden: true,\n\t\t\t},\n        })\n    );\n}\n\n// Deactivate the extension\nexport function deactivate() {\n    // Clean up resources when the extension is deactivated\n}"],
  "mappings": "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",
  "names": ["randomBytes"]
}
